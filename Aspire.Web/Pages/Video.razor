@page "/Video"
@inject IOptions<HubCfg> HubCfg
@inject IJSRuntime JsRuntime

@switch (State) {
    case EGameState.Idle:
        <MudForm @ref="_form">
            <MudTextField T="string" Label="Player Name" @bind-Value="PlayerName" Required="true"/>
        </MudForm>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="SearchMatch">
            Find Match
        </MudButton>
        break;
    case EGameState.WaitingForPlayer:
        <MudAlert Severity="Severity.Info">
            Waiting for player...
        </MudAlert>
        break;
    case EGameState.JoiningGame:
        <MudAlert Severity="Severity.Info">
            Joining game...
        </MudAlert>
        break;
    case EGameState.InGame:
        <MudGrid>
            <MudItem xs="6">
                <video id="localVideo" autoplay muted></video>
            </MudItem>
            <MudItem xs="6">
                <canvas id="remoteVideo" width="640" height="480"></canvas>
            </MudItem>
        </MudGrid>
        <MudItem xs="12">
            <MudButton OnClick="Stop" Variant="Variant.Filled" Size="Size.Large"
                       Color="Color.Error">
                Stop
            </MudButton>
            <MudButton OnClick="Next" Variant="Variant.Filled" Size="Size.Large"
                       Color="Color.Info">
                Next
            </MudButton>
        </MudItem>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {
    private MudForm _form = null!;
    
    private HubConnection? _hubConnection;

    private string RoomId { get; set; } = null!;

    private string PlayerName { get; set; } = null!;
    private string? OtherPlayerId { get; set; }

    private EGameState State { get; set; }

    protected override async Task OnInitializedAsync() {
        try {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl($"{HubCfg.Value.Url}/video")
                .Build();

            _hubConnection.On<byte[]>("ReceiveData", OnData);
            _hubConnection.On<string, string>("MatchFound", OnGameFound);
            _hubConnection.On("Skipped", Next);

            await _hubConnection.StartAsync();
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task SearchMatch() {
        try {
            await _form.Validate();
            if (!_form.IsValid) return;
            
            await _hubConnection!.InvokeAsync("JoinQueue", PlayerName, OtherPlayerId);
            State = EGameState.WaitingForPlayer;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task OnGameFound(string roomId, string otherPlayerId) {
        Console.WriteLine("Game found");
        OtherPlayerId = otherPlayerId;
        State = EGameState.JoiningGame;
        await InvokeAsync(StateHasChanged);
        RoomId = roomId;
        await _hubConnection!.SendAsync("JoinRoom", RoomId);
        State = EGameState.InGame;
        await InvokeAsync(StateHasChanged);
        await JsRuntime.InvokeVoidAsync("localVideo", DotNetObjectReference.Create(this),
            "localVideo", "start");
    }

    [JSInvokable]
    public async Task SendData(byte[] data) {
        if (_hubConnection?.State != HubConnectionState.Connected) {
            Console.WriteLine("Not connected");
            return;
        }

        await _hubConnection!.SendAsync("SendData", data, RoomId);
    }

    private async Task OnData(byte[] data) {
        await JsRuntime.InvokeVoidAsync("renderFrame", "remoteVideo", data);
    }

    private async Task Stop() {
        await JsRuntime.InvokeVoidAsync("localVideo", DotNetObjectReference.Create(this), "localVideo", "stop");
        await _hubConnection!.SendAsync("LeaveRoom", RoomId);
        await Task.Delay(50);
        await _hubConnection!.StopAsync();
        await JsRuntime.InvokeVoidAsync("clearCanvas", "remoteVideo");
        State = EGameState.Idle;
        await InvokeAsync(StateHasChanged);
        await OnInitializedAsync();
    }

    private async Task Next() {
        await JsRuntime.InvokeVoidAsync("localVideo", DotNetObjectReference.Create(this), "localVideo", "stop");
        await _hubConnection!.SendAsync("Next", RoomId, OtherPlayerId);
        await JsRuntime.InvokeVoidAsync("clearCanvas", "remoteVideo");
        State = EGameState.WaitingForPlayer;
        await InvokeAsync(StateHasChanged);
    }

}

