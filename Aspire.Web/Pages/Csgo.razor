@page "/csgo"
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory CsgoClient
@inject ISnackbar Snackbar
@inject IOptions<HubCfg> HubCfg
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

@if (ErrorMsg is not null) {
    <MudAlert Severity="Severity.Error">
        @ErrorMsg
    </MudAlert>
}

@switch (State) {
    case EGameState.Idle:
        <MudTextField Class="my-3" @bind-Value="LocalPlayer.Name" Label="Player Name"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="SearchMatch">
            Find Match
        </MudButton>
        break;
    case EGameState.WaitingForPlayer:
        <MudAlert Severity="Severity.Info">
            Waiting for player...
        </MudAlert>
        break;
    case EGameState.JoiningGame:
        <MudAlert Severity="Severity.Info">
            Joining game...
        </MudAlert>
        break;
    case EGameState.InGame:
        <MudPaper>
            <div class="d-flex, m-2">
                <div class="h-75">
                    <MudNumericField T="float" @bind-Value="LocalPlayer.Bet" Culture="CultureInfo.CurrentUICulture"/>
                </div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="SetBet">
                    Set Bet
                </MudButton>
            </div>

            <MudDivider Class="my-3"/>

            <MudExpansionPanel Text="Cases">
                <MudPaper Class="mb-3">
                    <MudTextField Class="my-3" @bind-Value="CaseSearch" Label="Case name"/>
                    <MudGrid>
                        @foreach (var c in GetCases()) {
                            <MudItem xs="6" md="4" lg="3" xl="2" xxl="1">
                                <MudCard Class="@("m-2 " + CheckSelected(c))" @onclick="async () => await SelectCase(c)">
                                    <MudCardHeader>
                                        @c.Name
                                    </MudCardHeader>
                                    <MudCardMedia Image="@c.Image" Height="125"></MudCardMedia>
                                    <MudCardActions>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>

                    <MudPagination @bind-Selected="Page" Count="(int)Math.Ceiling((float)GetCaseCount() / CasesPerPage)"/>
                </MudPaper>
            </MudExpansionPanel>

            <MudDivider Class="my-3"/>

            <div class="d-flex, m-2">
                <div class="h-75">
                    <MudCheckBox @bind-Checked="LocalPlayer.Ready" Label="Ready"/>
                </div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="SetReady">
                    Set Ready
                </MudButton>
            </div>

        </MudPaper>

        <MudDivider/>
        <MudGrid Class="mb-3">
            @foreach (var p in Players.Where(p => p.ConnId != LocalPlayer.ConnId)) {
                <MudItem xs="6" md="4" lg="3" xl="2" xxl="1">
                    <MudCard Class="m-2">
                        <MudCardHeader>
                            @p.Name
                        </MudCardHeader>
                        <MudCardMedia Image="@(CasesDb.FirstOrDefault(c => c.Id == p.CaseId)?.Image)"
                                      Height="125">
                        </MudCardMedia>
                        <MudCardActions Class="d-flex">
                            <MudText>Bet: @p.Bet</MudText>
                            <MudChip Color="Color.Primary" Class="ml-auto">@(p.Ready ? "Ready" : "Not Ready")</MudChip>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <MudDivider Class="my-3"/>
        @*@foreach (var anim in AnimationCases) {
            <div class="case-container">
                @foreach (var skin in anim.Skins) {
                    <div class="skin">
                        <img src="@skin.Image" width="150" alt="@skin.Name"/>
                        <MudProgressLinear Value="1" Max="1" Style="@("background-color:" + skin.Rarity.Color)"/>
                    </div>
                }
            </div>
        }

        <MudDivider Class="my-3"/>*@


        <MudGrid>
            @foreach (var (player, skins) in LastOpenedSkins) {
                <MudItem xs="12">
                    <MudCard Class="m-2">
                        <MudCardHeader>
                            @player.Name
                        </MudCardHeader>
                        <MudCardContent Class="d-flex">
                            @foreach (var skin in skins) {
                                <div class="skin">
                                    <img src="@skin.Image" width="150" alt="@skin.Name"/>
                                    <MudProgressLinear Value="1" Max="1" Style="@("background-color:" + skin.Rarity.Color)"/>
                                </div>
                            }
                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>


        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    private const int WonSkinId = 25;

    private EGameState State { get; set; }

    private Player LocalPlayer { get; set; } = new();

    private string CaseSearch { get; set; } = null!;

    private List<Case> CasesDb { get; set; } = [];

    private List<Player> Players { get; set; } = [];

    private Dictionary<Player, List<Item>> LastOpenedSkins { get; set; } = new();

    private List<AnimationCase> AnimationCases { get; set; } = [];

    private int CasesPerPage { get; set; } = 10;
    private int Page { get; set; } = 1;

    private string? ErrorMsg { get; set; }

    private HubConnection? _hubConnection;

    private readonly List<Func<Task>> _afterRenderAsyncJobs = [];

    public HttpClient Client { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        while (_afterRenderAsyncJobs.Count > 0) {
            var job = _afterRenderAsyncJobs[0];
            _afterRenderAsyncJobs.RemoveAt(0);
            await job();
        }
    }

    private IEnumerable<Case> GetCases() {
        return CasesDb.Skip((Page - 1) * CasesPerPage)
            .Take(CasesPerPage)
            .Where(c => string.IsNullOrEmpty(CaseSearch) || c.Name.Contains(CaseSearch, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private string CheckSelected(Case c) {
        return c.Id == LocalPlayer.CaseId ? "selected" : "clickable";
    }

    private int GetCaseCount() {
        return CasesDb.Count(c => string.IsNullOrEmpty(CaseSearch) || c.Name.Contains(CaseSearch, StringComparison.OrdinalIgnoreCase));
    }

    private async Task ScrollToSkin(int index) {
        var scrollPosition = 150 * index; // Calculate based on the index and width of the skin
        await JsRuntime.InvokeVoidAsync("smoothScrollToPosition", scrollPosition);
    }

    protected override async Task OnInitializedAsync() {
        Client = CsgoClient.CreateClient("csgo");
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{HubCfg.Value.Url}/matchmaking")
            .Build();

        _hubConnection.On<string>("MatchFound", OnGameFound);

        await _hubConnection.StartAsync();
        CasesDb = (await Client.GetFromJsonAsync<List<Case>>("crates.json"))!;
        if (CasesDb is null) {
            ErrorMsg = "Failed to load cases";
            return;
        }

        CasesDb = CasesDb.Where(c => c.Name.Contains("case", StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task JoinGame(string matchId) {
        if (_hubConnection != null) await _hubConnection.DisposeAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{HubCfg.Value.Url}/csgo")
            .Build();

        _hubConnection.On<Player>("PlayerJoined", OnPlayerJoined);
        _hubConnection.On<Player>("SetLocalPlayer", OnLocalPlayerSet);
        _hubConnection.On<string>("PlayerLeft", OnPlayerLeft);
        _hubConnection.On<string, float>("ReceiveBetChange", OnBetChanged);
        _hubConnection.On<string, string>("ReceiveCaseChange", OnCaseChanged);
        _hubConnection.On<string, bool>("ReceiveReadyChange", OnReadyChanged);
        _hubConnection.On<List<string>, bool>("ReceiveReadyReset", OnReadyReset);
        _hubConnection.On<Dictionary<string, List<string>>>("StartRound", OnStartRound);

        await _hubConnection.StartAsync();

        await _hubConnection.InvokeAsync("JoinGame", matchId, LocalPlayer.Name);
    }

    private Task OnLocalPlayerSet(Player localPlayer) {
        LocalPlayer = localPlayer;
        return InvokeAsync(StateHasChanged);
    }

    private async Task SelectCase(Case c) {
        if (_hubConnection == null) return;
        await _hubConnection!.InvokeAsync("SetCase", c.Id);
    }

    private async Task SetReady() {
        if (_hubConnection == null) return;
        await _hubConnection!.InvokeAsync("SetReady", LocalPlayer.Ready);
    }

    private async Task SetBet() {
        if (_hubConnection == null) return;
        await _hubConnection!.InvokeAsync("SetBet", LocalPlayer.Bet);
    }

    private async Task OnReadyChanged(string userId, bool ready) {
        Players.First(p => p.ConnId == userId).Ready = ready;
        await InvokeAsync(StateHasChanged);
    }

    private Task OnReadyReset(List<string> userIds, bool ready) {
        foreach (var userId in userIds)
            Players.First(p => p.ConnId == userId).Ready = ready;
        return InvokeAsync(StateHasChanged);
    }

    private async Task OnCaseChanged(string userId, string caseId) {
        Players.First(p => p.ConnId == userId).CaseId = caseId;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnBetChanged(string userId, float bet) {
        Players.First(p => p.ConnId == userId).Bet = bet;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnStartRound(Dictionary<string, List<string>> results) {
        try {
            foreach (var (key, value) in results) {
                var player = Players.First(p => p.ConnId == key);
                var c = CasesDb.First(c => c.Id == player.CaseId);

                AnimationCases.Add(new AnimationCase(player, value.Select(s => c.Skins.First(skin => skin.Id == s)).ToArray()));
            }

            //_afterRenderAsyncJobs.Add(async () => { await ScrollToSkin(WonSkinId); });

            await InvokeAsync(StateHasChanged);
#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
            Task.Delay(1000).ContinueWith(_ => {
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                foreach (var res in AnimationCases) {
                    LastOpenedSkins.TryAdd(res.Player, []);
                    var skins = LastOpenedSkins[res.Player];
                    skins.Add(res.Skins[WonSkinId]);
                }

                AnimationCases.Clear();
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception e) {
            Console.WriteLine(e);
        }
    }

    private async Task OnPlayerJoined(Player player) {
        if (player.ConnId == LocalPlayer.ConnId) LocalPlayer = player;
        Players.Add(player);
        await InvokeAsync(StateHasChanged);
    }

    private Task OnPlayerLeft(string userId) {
        Players.RemoveAll(p => p.ConnId == userId);
        return InvokeAsync(StateHasChanged);
    }

    private async Task OnGameFound(string matchId) {
        State = EGameState.JoiningGame;
        await InvokeAsync(StateHasChanged);
        await JoinGame(matchId);
        State = EGameState.InGame;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchMatch() {
        if (string.IsNullOrEmpty(LocalPlayer.Name) || string.IsNullOrWhiteSpace(LocalPlayer.Name)) {
            Snackbar.Add("Please enter a valid player name", Severity.Error);
            return;
        }

        if (_hubConnection == null) return;

        await _hubConnection.InvokeAsync("JoinQueue");
        State = EGameState.WaitingForPlayer;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection != null) await _hubConnection.DisposeAsync();
        Client?.Dispose();
    }

}